from logging import raiseExceptions
import sys
import rclpy
from rclpy.node import Node
from rclpy.executors import ExternalShutdownException

import numpy as np
from numpy.linalg import norm
import math as m
import time 
import matplotlib.pyplot as plt
from jetbot.jb_utils import quat2eul
from jetbot.jb_control import calculate_angle, LQRcontroller

from geometry_msgs.msg import PoseStamped, Point, Twist
from std_msgs.msg import Bool
from interfaces.srv import Task

from rclpy.qos import QoSProfile
from rclpy.qos import QoSReliabilityPolicy
from rclpy.qos import qos_profile_sensor_data


from message_filters import ApproximateTimeSynchronizer, Subscriber

verbose = True
plot = False

class identifier(Node):
    def __init__(self):
        super().__init__('client')
        self.state = np.array([999.,0.,0.]) # x,y,theta: [-pi,pi]
        self.declare_parameter('id', 1)
        self.id = self.get_parameter('id').value
        self.time_init = time.time()
        qos = qos_profile_sensor_data

        # Subscribe to pose topic
        self.pose_sub = self.create_subscription(PoseStamped, '/vrpn_client_node/SycaBot_W'+ str(self.id) +'/pose', self.get_pose_cb, qos)

        # Create motor publisher
        self.vel_cmd_pub = self.create_publisher(Twist, '/SycaBot_W' + str(self.id) + '/cmd_vel', qos)
    

    def get_pose_cb(self, p):
        '''
        Get jetbot positions.

        arguments :
            p (PoseStamped) = position of the jetbots
        ------------------------------------------------
        return :
        '''
        quat = [p.pose.orientation.x, p.pose.orientation.y, p.pose.orientation.z, p.pose.orientation.w]
        theta = quat2eul(quat)
        self.state = np.array([p.pose.position.x, p.pose.position.y, theta])

        if verbose :
            self.get_logger().info(
                        'State of robot is : (x=%f, y=%f, theta=%f)\n' %(self.state[0], self.state[1], self.state[2]))
        return



def main(args=None):
    rclpy.init(args=args)             
    t_init = time.time()
    idfier = identifier()



if __name__ == '__main__':
    main()